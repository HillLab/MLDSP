#!/usr/bin/env python
"""
TBD @DANIEL
"""
from argparse import Action, ArgumentParser, ArgumentDefaultsHelpFormatter
from os import getenv
from pathlib import Path

from joblib import cpu_count

from MLDSP_core.main import startCalcProcess

if __name__ == '__main__':
    class PathAction(Action):
        """
        Class to set the action to store as path
        """

        def __call__(self, parser, namespace, values, option_string=None):
            if not values:
                parser.error("You need to provide a string with path or "
                             "filename")
            p = Path(values).resolve()
            if not (p.is_file() or p.is_dir()):
                p = Path(getenv(values)).resolve()

            setattr(namespace, self.dest, p)


    opt = ArgumentParser(usage='%(prog)s data_set_path metadata [options]',
                         formatter_class=ArgumentDefaultsHelpFormatter)
    opt.add_argument('training_set', help='Path to data set to train the'
                                          ' models with', action=PathAction)
    opt.add_argument('training_labels', help='CSV with the mapping of '
                                             'labels and sequence names')
    opt.add_argument('--run_name', '-r', help='Name of the run',
                     default='Bacteria')
    opt.add_argument('--output_directory', '-o', default=Path(),
                     action=PathAction,
                     help='Path to the output directory')
    opt.add_argument('--cpus', '-c', help='Number of cpus to use',
                     default=cpu_count(), type=int)
    opt.add_argument('--order', '-d', default='ACGT', type=str,
                     help='Order of the nucleotides in CGR')
    opt.add_argument('--kmer', '-k', help='Kmer size', default=5, type=int)
    opt.add_argument('--method', '-m', default=14, type=int,
                     choices=range(1, 17),
                     help='Numeric representation of method (see more in'
                          ' the documentation)')
    opt.add_argument('--folds', '-f', default=10, type=int,
                     help='Number of folds for cross-validation')
    opt.add_argument('--to_json', '-j', default=False, action='store_true',
                     help='Number of folds for cross-validation')

    args = opt.parse_args()

    startCalcProcess(args)
